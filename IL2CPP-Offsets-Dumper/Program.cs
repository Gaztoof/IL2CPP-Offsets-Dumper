using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using dnlib.DotNet;
using System.IO;

namespace IL2CPP_Offsets_Dumper
{
    class IL2CPP_Field
    {
        public string offset = "";
        public string type = "";
        public string name = "";
    }
    class IL2CPP_Class
    {
        public List<IL2CPP_Field> fields = new List<IL2CPP_Field>();
        public string className = "";
    }
    class Program
    {
        public static ModuleDefMD BaseProgram;

        static void Main(string[] args)
        {
            List<string> reservedKeywords = new List<string>() { "signed", "template", "class", "namespace", "" };
            Console.Title = "IL2CPP SDK Maker - Coded by t.me/Gaztoof";

            Console.WriteLine("Please, download IL2CPP Dumper (https://github.com/Perfare/Il2CppDumper), and execute it.");

            Console.Write("Please, slide the dummy Assembly-CSharp.dll generated by IL2CPP Dumper here: ");
            string fileName = Console.ReadLine().Replace("\"", "");

            BaseProgram = ModuleDefMD.Load(fileName);
            Console.WriteLine("Please, wait...");

            List<IL2CPP_Class> classes = new List<IL2CPP_Class>();
            foreach (var type in BaseProgram.Types)
            {
                IL2CPP_Class c = new IL2CPP_Class();
                string className = type.Name;

                if (className.Contains("`"))
                    className = className.Split('`')[0];

                c.className = className.Replace("<", "").Replace(">", "");

                foreach (var field in type.Fields)
                {
                    string normalizedFieldName = field.Name.Replace("<", "").Replace(">", "");

                    var fieldOffsets = field.CustomAttributes.Where(x => x.TypeFullName.Contains("FieldOffsetAttribute"));

                    if (fieldOffsets.Count() > 0)
                    {
                        UTF8String offset = (UTF8String)fieldOffsets.FirstOrDefault().Fields.First().Value;
                        IL2CPP_Field il2cppfield = new IL2CPP_Field();
                        il2cppfield.type = field.FieldType.TypeName.Replace("Boolean", "bool").Replace("UInt32", "uint32_t").Replace("Int32", "int32_t").Replace("String", "string").Replace("Byte", "char").Replace("Single", "float");
                        il2cppfield.offset = offset;
                        il2cppfield.name = field.Name.Replace("<", "").Replace(">", "");
                        if (reservedKeywords.Contains(il2cppfield.name)) il2cppfield.name += "_";

                        c.fields.Add(il2cppfield);
                    }
                }

                var matchingClasses = classes.Where(x => x.className == type.Name);

                if (matchingClasses.Count() == 0)
                    classes.Add(c);

                else
                {
                    var matchingClass = matchingClasses.FirstOrDefault();
                    foreach (var field in c.fields)
                    {
                        while (matchingClass.fields.Count(x => x.name == field.name) > 0)
                            field.name += "_";
                    }
                    matchingClass.fields.AddRange(c.fields);

                }
            }

            string output = "namespace Offsets\n{\n";
            foreach (var c in classes)
            {
                if (c.fields.Count == 0) continue;

                output += "\tnamespace " + c.className + "\n\t{\n";
                foreach (var field in c.fields)
                {
                    // Sanitization
                    if (field.name.Length < 0) continue;
                    if (field.name[0] >= '0' && field.name[0] <= '9')
                        field.name = "_" + field.name;


                    output += "\t\tconstexpr auto " + field.name + " = " + field.offset + "; // " + field.type + "\n";

                }
                output += "\t}\n";
            }
            output += "};\n";
            File.WriteAllText(System.Windows.Forms.Application.StartupPath + "\\SDK.txt", output);
            Console.WriteLine("Successfully saved output to SDK.txt!");
            Console.ReadLine();
        }
    }
}